#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun Jan 29 11:07:25 2017

@author: estelleaflalo
"""

from keras.models import Sequential
from keras.layers.core import Flatten, Dense, Dropout
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
import cv2, numpy as np
from sklearn.svm import SVR
from sklearn.cross_validation import train_test_split
from keras import optimizers
from keras.utils.np_utils import to_categorical
from sklearn.linear_model import LinearRegression
import re
from scipy.stats import rankdata
import copy

numbers = re.compile(r'(\d+)')

def numericalSort(value):
    parts = numbers.split(value)
    parts[1::2] = map(int, parts[1::2])
    return parts


def VGG_16(weights_path):
    model = Sequential()
    model.add(ZeroPadding2D((1,1),input_shape=(3,224,224), dim_ordering="th"))
    model.add(Convolution2D(64, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(64, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(128, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(128, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(256, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(256, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(256, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(Flatten())
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1000, activation='softmax'))

    if weights_path:
        model.load_weights(weights_path)
        model.pop()
        model.pop()
        model.pop()
        model.pop()
        model.pop()
    return model
    

out_old=np.zeros((1, 25088))
i=0
model1 = VGG_16('vgg16_weights.h5')
sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
model1.compile(optimizer=sgd, loss='categorical_crossentropy')

if __name__ == "__main__":
    for img in sorted(glob.glob(pathname), key=numericalSort):
        im = cv2.resize(cv2.imread(img), (224, 224)).astype(np.float32)
        im[:,:,0] -= 103.939
        im[:,:,1] -= 116.779
        im[:,:,2] -= 123.68
        im = im.transpose((2,0,1))
        im = np.expand_dims(im, axis=0)
    # Test pretrained model
        model = copy.copy(model1)
        out = model.predict(im)
        feat=np.concatenate((out, out_old), axis=0)
        out_old=feat
        i=i+1
        print (i)
        if i>1000:
            break
 

pathname="/Users/estelleaflalo/Desktop/M2_Data_Science/First_Period/Machine_Learning_from_Theory_to_Practice/Project/challenge_fichier_dentrees_dentrainement_predire_le_score_esthetique_dun_portrait/pictures_train/*.jpg"
pathresult = "/Users/estelleaflalo/Desktop/M2_Data_Science/First_Period/Machine_Learning_from_Theory_to_Practice/Project/challenge_fichier_de_sortie_dentrainement_predire_le_score_esthetique_dun_portrait.csv"
path_data = "/Users/estelleaflalo/Desktop/M2_Data_Science/First_Period/Machine_Learning_from_Theory_to_Practice/Project/challenge_fichier_dentrees_dentrainement_predire_le_score_esthetique_dun_portrait/facial_features_train.csv"



X_train, X_test, y_train, y_test = train_test_split(feat, result['TARGET'][:feat.shape[0]], train_size=0.8, random_state=0)

#Train the model 

mod=SVC(C=100)
mod.fit(X_train, y_train)

#Prediction
y_pred = mod.predict(X_test)
#spearman_error(y_test,y_pred)
#y_test=np.argmax(y_test,axis=1)
# accuracy : mean square error
print("Mean Squared error: {}", mean_squared_error(y_test, y_pred))
print(y_pred[:10],y_test[:10])
print(np.std(y_pred))



#TO BE RUN

def spearman_error(y_true, y_pred):
    y_true_rank = rankdata(y_true)
    y_pred_rank = rankdata(y_pred)
    square_distance = np.dot((y_pred_rank - y_true_rank).T, (y_pred_rank - y_true_rank))
    accuracy = 1 - 6*square_distance/(y_pred_rank.shape[0]*(y_pred_rank.shape[0]**2 - 1))

    return accuracy

spearman_error(y_test,y_pred)
#-----------------------------------------------------------------------------

path_data_test="/Users/estelleaflalo/Desktop/M2_Data_Science/First_Period/Machine_Learning_from_Theory_to_Practice/Project/challenge_fichiers_dentrees_de_test_predire_le_score_esthetique_dun_portrait/facial_features_test.csv" 
pathname_test="/Users/estelleaflalo/Desktop/M2_Data_Science/First_Period/Machine_Learning_from_Theory_to_Practice/Project/challenge_fichiers_dentrees_de_test_predire_le_score_esthetique_dun_portrait/pictures_test/*.jpg"
i=0
out_old=np.zeros((1, 25088))
for img in sorted(glob.glob(pathname_test), key=numericalSort):
    im = cv2.resize(cv2.imread(img), (224, 224)).astype(np.float32)
    im[:,:,0] -= 103.939
    im[:,:,1] -= 116.779
    im[:,:,2] -= 123.68
    im = im.transpose((2,0,1))
    im = np.expand_dims(im, axis=0)
    # Test pretrained model
    model = copy.copy(model1)
    out = model.predict(im)
    feat2=np.concatenate((out, out_old), axis=0)
    out_old=feat
    i=i+1
    if i%10==0:
        print (i)
    

#Prediction
y_pred2 = linear.predict(feat2)
y_pred2=np.argmax(y_pred2,axis=1)
print(y_pred2[:10])

    

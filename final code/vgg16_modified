#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun Jan 29 11:07:25 2017

@author: estelleaflalo
"""

from keras.models import Sequential
from keras.layers.core import Flatten, Dense, Dropout
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.optimizers import SGD
import cv2, numpy as np

def VGG_16(weights_path):
    model = Sequential()
    model.add(ZeroPadding2D((1,1),input_shape=(3,224,224), dim_ordering="th"))
    model.add(Convolution2D(64, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(64, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(128, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(128, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(256, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(256, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(256, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(ZeroPadding2D((1,1), dim_ordering="th"))
    model.add(Convolution2D(512, 3, 3, activation='relu', dim_ordering="th"))
    model.add(MaxPooling2D((2,2), strides=(2,2), dim_ordering="th"))

    model.add(Flatten())
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(4096, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(1000, activation='softmax'))

    if weights_path:
        model.load_weights(weights_path)
        model.pop()
        model.pop()
        model.pop()
        model.pop()
        model.pop()
    return model
import copy
out_old=np.zeros((1, 25088))
i=0
model1 = VGG_16('vgg16_weights.h5')
sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
model1.compile(optimizer=sgd, loss='categorical_crossentropy')

if __name__ == "__main__":
    for img in glob.glob(pathname):
        im = cv2.resize(cv2.imread(img), (224, 224)).astype(np.float32)
        im[:,:,0] -= 103.939
        im[:,:,1] -= 116.779
        im[:,:,2] -= 123.68
        im = im.transpose((2,0,1))
        im = np.expand_dims(im, axis=0)
    # Test pretrained model
        model = copy.copy(model1)
        out = model.predict(im)
        feat=np.concatenate((out, out_old), axis=0)
        out_old=feat
        i=i+1
        print i
        if i>500:
            break
    #print np.argmax(out)

